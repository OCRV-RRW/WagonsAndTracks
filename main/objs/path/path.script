Path = require("main.classes.path")

local function get_destination_pos(self, collision_object_id)
	local destination_point_id = self.obj:get_destination_point(collision_object_id)
	msg.post(msg.url(destination_point_id), 'disable_collision')
	return go.get_world_position(destination_point_id)
end

function init(self)
	local path_point = go.get_id('path_point')
	local path_point1 = go.get_id('path_point1')
	msg.post(path_point, 'set_path')
	msg.post(path_point1, 'set_path')
	self.obj = Path(path_point, path_point1, {path_point1})
	self.enter = false
end

function final(self)
	self.obj = nil
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("on_wagon_collision") then
		pprint('static')
		msg.post(message.wagon, 'set_destination_pos', {destination_pos = get_destination_pos(self, message.go_id)})
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
