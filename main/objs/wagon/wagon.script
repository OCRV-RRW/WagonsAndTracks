local event_bus = require("main.modules.event_bus_module")
local GAME_STATISTIC = require("main.modules.game_statistic")

Wagon = require("main.classes.wagon")

go.property("color", 0)
go.property("speed", 0.5)

local function vect_to_quat_90(vect)
	return vmath.quat_rotation_z(math.atan2(vect.y, vect.x) + math.pi/2)
end

function init(self)
	self.bezie_t = 0
	self.bezie_start_point = vmath.vector3()
	self.bezie_end_point = vmath.vector3()
	self.bezie_middle_point = vmath.vector3()
	self.obj = Wagon(self.color)
	self.no_colision = true
end

function final(self)
	self.obj = nil
end

function update(self, dt)
	if self.no_colision then
		local new_pos = go.get_position() + vmath.vector3(0, self.speed * 300, 0) * dt
		go.set_position(new_pos)
	else
		self.bezie_t = self.bezie_t + (dt * self.speed)
		local new_pos =
			math.pow(1 - self.bezie_t, 2) * self.bezie_start_point + 
			2 * self.bezie_t * (1 - self.bezie_t) * self.bezie_middle_point +
			math.pow(self.bezie_t, 2) * self.bezie_end_point
		if new_pos == go.get_position() then return end
		local direction = vmath.normalize(new_pos - go.get_world_position())
		go.set_rotation(vect_to_quat_90(direction))
		go.set_position(new_pos)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if not message.enter then return end
		self.no_colision = false
		msg.post(message.other_id, "on_wagon_collision", {wagon = go.get_id()})
	end

	if message_id == hash("set_destination_pos") then
		self.bezie_t = 0
		self.bezie_start_point = go.get_world_position()
		self.bezie_end_point = message.destination_pos
		self.bezie_middle_point = message.help_pos
	end

	if message_id == hash('delete_obj') then
		event_bus.EVENT_BUS:invoke(GAME_STATISTIC.EVENTS.on_end_way_wagon)
		if message.right then
			msg.post("/gui", "wagon_is_done")
			event_bus.EVENT_BUS:invoke(GAME_STATISTIC.EVENTS.on_done_wagon)
		else
			event_bus.EVENT_BUS:invoke(GAME_STATISTIC.EVENTS.on_fail_wagon)
		end
		go.delete(go.get_id(), true)
	end

	if message_id == hash('get_wagon_data') then
		msg.post(sender, 'check_state', {wagon = self.obj, go_id = go.get_id()})
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
