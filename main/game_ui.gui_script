local druid = require "druid.druid"
local timer = require "druid.extended.timer"
local g_event_bus = require "main.global_event_bus"

local GAME_MANAGER = hash("/game_manager#game_manager")


function init(self)
	msg.post(".", "acquire_input_focus")
	self.druid = druid.new(self)
	self.timer = self.druid:new(timer, "timer", 0, 0)

	self.timer_end_handler = function ()
		if	self.timer_owner ~= nil then
			msg.post(self.timer_owner, "time_is_up")
		end
	end

	self.timer.on_timer_end:subscribe(self.timer_end_handler)
	self.score = self.druid:new_text("score")
	init_result_panel(self)
	init_pause(self)
end


function final(self)
	self.timer.on_timer_end:unsubscribe(self.timer_end_handler)
	self.druid:final()
end


function update(self, dt)
	self.druid:update(dt)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("start_timer") then
		start_timer(self, message.time)
		self.timer_owner = sender
	elseif message_id == hash("update_score") then
		self.score:set_to(message.score)
	elseif message_id == hash("show_result_panel") then
		update_result_panel(self, message.statistic_data)
		gui.set_enabled(self.result_panel, true)
	end
	self.druid:on_message(message_id, message, sender)
end


function on_input(self, action_id, action)
	self.druid:on_input(action_id, action)
end


function on_reload(self)
	self.druid:on_reload()
end


function start_timer(self, time)
	self.timer:set_interval(time, 0)
end


function init_pause(self)
	self.druid:new_blocker("pause_panel")
	self.druid:new_button("pause_button", on_pause)
	self.druid:new_button("play_button", on_play)
	self.pause_panel = gui.get_node("pause_panel")
	self.play_button = gui.get_node("play_button")
end


function init_result_panel(self)
	self.result_panel = gui.get_node("result_panel")
	self.druid:new_blocker("result_panel")

	self.result_rounds = self.druid:new_text("result_rounds")
	self.result_correct = self.druid:new_text("result_correct")
	self.result_incorrect = self.druid:new_text("result_incorrect")
	self.result_average_time = self.druid:new_text("result_average_time")
	self.restart_button = self.druid:new_button("restart_button", on_restart_button_callback)
end


function on_restart_button_callback(self)
	gui.set_enabled(self.result_panel, false)
	msg.post(self.timer_owner, "restart_game")
end


local function round(number, n)
    local factor = 10 ^ (n or 0)
    return math.floor(number * factor + 0.5) / factor
end


---@param statistic_data StatisticData
function update_result_panel(self, statistic_data)
	self.result_rounds:set_to("Раунды: " .. statistic_data.rounds_amount)
	self.result_correct:set_to("Успешно: " .. statistic_data.correct_rounds)
	self.result_incorrect:set_to("Неудачно: " .. statistic_data.incorrect_rounds)
	self.result_average_time:set_to("Ср. время: " .. round(statistic_data.average_round_time, 2))
end


function on_pause(self)
	g_event_bus:invoke("pause")
	gui.set_enabled(self.pause_panel, true)
	gui.set_enabled(self.play_button, true)
	self.timer:set_state(false)
end


function on_play(self)
	g_event_bus:invoke("not_pause")
	gui.set_enabled(self.pause_panel, false)
	gui.set_enabled(self.play_button, false)
	self.timer:set_state(true)
end