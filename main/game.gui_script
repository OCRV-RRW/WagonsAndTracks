local druid = require("druid.druid")
local timer = require('druid.extended.timer')
local GAME_SETTINGS = require('main.modules.game_settings')
local GAME_STATE = require('main.modules.game_state')

local function start_timer(self, time)
	self.timer:set_interval(time, 0)
end

local function on_pause_button_click()
	pprint("click")
	if GAME_STATE.IS_PAUSED then
		msg.post("bootstrap:/bootstrap", "resume_level")
		gui.set_enabled(gui.get_node("pause_window"), false)
	else
		msg.post("bootstrap:/bootstrap", "pause_level")
		gui.set_enabled(gui.get_node("pause_window"), true)
	end
end

function init(self)
	self.is_paused = false
	self.druid = druid.new(self)
	self.timer = self.druid:new(timer, "time", 0, 0)
	self.train_counter = self.druid:new_text('train_count', 0)
	self.pause_button = self.druid:new_button('pause', on_pause_button_click)

	self.timer_end_handler = function ()
		pprint("FinishGame")
	end

	self.update_train_counter = function ()
		self.train_counter:set_to(self.train_counter.last_value + 1)
	end
	
	self.timer.on_timer_end:subscribe(self.timer_end_handler)
	start_timer(self, GAME_SETTINGS.TIME)
end

function final(self)
	self.druid:final()
	self.timer.on_timer_end:unsubscribe(self.timer_end_handler)
	self.timer_end_handler = nil
	self.update_train_counter = nil 
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	if message_id == hash("wagon_is_done") then
		self.update_train_counter()
	end
end

function on_input(self, action_id, action)
	self.druid:on_input(action_id, action)
end
